/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Questionnaire as PrismaQuestionnaire,
  Apartment as PrismaApartment,
  User as PrismaUser,
} from "@prisma/client";

export class QuestionnaireServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestionnaireCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questionnaire.count(args);
  }

  async questionnaires(
    args: Prisma.QuestionnaireFindManyArgs
  ): Promise<PrismaQuestionnaire[]> {
    return this.prisma.questionnaire.findMany(args);
  }
  async questionnaire(
    args: Prisma.QuestionnaireFindUniqueArgs
  ): Promise<PrismaQuestionnaire | null> {
    return this.prisma.questionnaire.findUnique(args);
  }
  async createQuestionnaire(
    args: Prisma.QuestionnaireCreateArgs
  ): Promise<PrismaQuestionnaire> {
    return this.prisma.questionnaire.create(args);
  }
  async updateQuestionnaire(
    args: Prisma.QuestionnaireUpdateArgs
  ): Promise<PrismaQuestionnaire> {
    return this.prisma.questionnaire.update(args);
  }
  async deleteQuestionnaire(
    args: Prisma.QuestionnaireDeleteArgs
  ): Promise<PrismaQuestionnaire> {
    return this.prisma.questionnaire.delete(args);
  }

  async getApartment(parentId: string): Promise<PrismaApartment | null> {
    return this.prisma.questionnaire
      .findUnique({
        where: { id: parentId },
      })
      .apartment();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.questionnaire
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
